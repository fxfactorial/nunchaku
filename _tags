# OASIS_START
# DO NOT EDIT (digest: 6f5584e7a298a6f504d61660990e631b)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library nunchaku_core
"src/core/nunchaku_core.cmxs": use_nunchaku_core
"src/core/ID.cmx": for-pack(Nunchaku_core)
"src/core/Var.cmx": for-pack(Nunchaku_core)
"src/core/MetaVar.cmx": for-pack(Nunchaku_core)
"src/core/Location.cmx": for-pack(Nunchaku_core)
"src/core/Intf.cmx": for-pack(Nunchaku_core)
"src/core/Utils.cmx": for-pack(Nunchaku_core)
"src/core/Transform.cmx": for-pack(Nunchaku_core)
"src/core/UntypedAST.cmx": for-pack(Nunchaku_core)
"src/core/Model.cmx": for-pack(Nunchaku_core)
"src/core/TypeUnify.cmx": for-pack(Nunchaku_core)
"src/core/Problem.cmx": for-pack(Nunchaku_core)
"src/core/FO.cmx": for-pack(Nunchaku_core)
"src/core/Reduce.cmx": for-pack(Nunchaku_core)
"src/core/Solver_intf.cmx": for-pack(Nunchaku_core)
"src/core/Env.cmx": for-pack(Nunchaku_core)
"src/core/Signature.cmx": for-pack(Nunchaku_core)
"src/core/Statement.cmx": for-pack(Nunchaku_core)
"src/core/Scheduling.cmx": for-pack(Nunchaku_core)
"src/core/CVC4.cmx": for-pack(Nunchaku_core)
"src/core/Polarity.cmx": for-pack(Nunchaku_core)
"src/core/Traversal.cmx": for-pack(Nunchaku_core)
"src/core/ProblemMetadata.cmx": for-pack(Nunchaku_core)
"src/core/terms/TermInner.cmx": for-pack(Nunchaku_core)
"src/core/terms/TermTyped.cmx": for-pack(Nunchaku_core)
"src/core/terms/TermPoly.cmx": for-pack(Nunchaku_core)
"src/core/terms/TermMono.cmx": for-pack(Nunchaku_core)
"src/core/terms/Pattern.cmx": for-pack(Nunchaku_core)
"src/core/types/TypePoly.cmx": for-pack(Nunchaku_core)
"src/core/types/TypeMono.cmx": for-pack(Nunchaku_core)
"src/core/transformations/Skolem.cmx": for-pack(Nunchaku_core)
"src/core/transformations/TypeInference.cmx": for-pack(Nunchaku_core)
"src/core/transformations/ElimPatternMatch.cmx": for-pack(Nunchaku_core)
"src/core/transformations/Monomorphization.cmx": for-pack(Nunchaku_core)
"src/core/transformations/ElimRecursion.cmx": for-pack(Nunchaku_core)
"src/core/transformations/ElimMultipleEqns.cmx": for-pack(Nunchaku_core)
"src/core/transformations/ElimIndPreds.cmx": for-pack(Nunchaku_core)
"src/core/transformations/ElimCopy.cmx": for-pack(Nunchaku_core)
"src/core/transformations/Polarize.cmx": for-pack(Nunchaku_core)
"src/core/transformations/Unroll.cmx": for-pack(Nunchaku_core)
"src/core/transformations/IntroGuards.cmx": for-pack(Nunchaku_core)
<src/core/*.ml{,i,y}>: package(containers)
<src/core/*.ml{,i,y}>: package(containers.data)
<src/core/*.ml{,i,y}>: package(containers.iter)
<src/core/*.ml{,i,y}>: package(containers.sexp)
<src/core/*.ml{,i,y}>: package(sequence)
<src/core/*.ml{,i,y}>: package(threads)
<src/core/*.ml{,i,y}>: package(unix)
<src/core/terms/*.ml{,i,y}>: package(containers)
<src/core/terms/*.ml{,i,y}>: package(containers.data)
<src/core/terms/*.ml{,i,y}>: package(containers.iter)
<src/core/terms/*.ml{,i,y}>: package(containers.sexp)
<src/core/terms/*.ml{,i,y}>: package(sequence)
<src/core/terms/*.ml{,i,y}>: package(threads)
<src/core/terms/*.ml{,i,y}>: package(unix)
<src/core/transformations/*.ml{,i,y}>: package(containers)
<src/core/transformations/*.ml{,i,y}>: package(containers.data)
<src/core/transformations/*.ml{,i,y}>: package(containers.iter)
<src/core/transformations/*.ml{,i,y}>: package(containers.sexp)
<src/core/transformations/*.ml{,i,y}>: package(sequence)
<src/core/transformations/*.ml{,i,y}>: package(threads)
<src/core/transformations/*.ml{,i,y}>: package(unix)
<src/core/types/*.ml{,i,y}>: package(containers)
<src/core/types/*.ml{,i,y}>: package(containers.data)
<src/core/types/*.ml{,i,y}>: package(containers.iter)
<src/core/types/*.ml{,i,y}>: package(containers.sexp)
<src/core/types/*.ml{,i,y}>: package(sequence)
<src/core/types/*.ml{,i,y}>: package(threads)
<src/core/types/*.ml{,i,y}>: package(unix)
# Library nunchaku_parsers
"src/parsers/nunchaku_parsers.cmxs": use_nunchaku_parsers
<src/parsers/*.ml{,i,y}>: package(containers)
<src/parsers/*.ml{,i,y}>: package(containers.data)
<src/parsers/*.ml{,i,y}>: package(containers.iter)
<src/parsers/*.ml{,i,y}>: package(containers.sexp)
<src/parsers/*.ml{,i,y}>: package(sequence)
<src/parsers/*.ml{,i,y}>: package(threads)
<src/parsers/*.ml{,i,y}>: package(unix)
<src/parsers/*.ml{,i,y}>: use_nunchaku_core
# Executable nunchaku
"src/main/nunchaku.native": package(containers)
"src/main/nunchaku.native": package(containers.data)
"src/main/nunchaku.native": package(containers.iter)
"src/main/nunchaku.native": package(containers.sexp)
"src/main/nunchaku.native": package(sequence)
"src/main/nunchaku.native": package(threads)
"src/main/nunchaku.native": package(unix)
"src/main/nunchaku.native": use_nunchaku_core
"src/main/nunchaku.native": use_nunchaku_parsers
<src/main/*.ml{,i,y}>: package(containers)
<src/main/*.ml{,i,y}>: package(containers.data)
<src/main/*.ml{,i,y}>: package(containers.iter)
<src/main/*.ml{,i,y}>: package(containers.sexp)
<src/main/*.ml{,i,y}>: package(sequence)
<src/main/*.ml{,i,y}>: package(threads)
<src/main/*.ml{,i,y}>: package(unix)
<src/main/*.ml{,i,y}>: use_nunchaku_core
<src/main/*.ml{,i,y}>: use_nunchaku_parsers
# Executable run_qtest
"qtest/run_qtest.native": package(QTest2Lib)
"qtest/run_qtest.native": package(containers)
"qtest/run_qtest.native": package(containers.data)
"qtest/run_qtest.native": package(containers.iter)
"qtest/run_qtest.native": package(containers.sexp)
"qtest/run_qtest.native": package(oUnit)
"qtest/run_qtest.native": package(sequence)
"qtest/run_qtest.native": package(threads)
"qtest/run_qtest.native": package(unix)
"qtest/run_qtest.native": use_nunchaku_core
"qtest/run_qtest.native": use_nunchaku_parsers
<qtest/*.ml{,i,y}>: package(QTest2Lib)
<qtest/*.ml{,i,y}>: package(containers)
<qtest/*.ml{,i,y}>: package(containers.data)
<qtest/*.ml{,i,y}>: package(containers.iter)
<qtest/*.ml{,i,y}>: package(containers.sexp)
<qtest/*.ml{,i,y}>: package(oUnit)
<qtest/*.ml{,i,y}>: package(sequence)
<qtest/*.ml{,i,y}>: package(threads)
<qtest/*.ml{,i,y}>: package(unix)
<qtest/*.ml{,i,y}>: use_nunchaku_core
<qtest/*.ml{,i,y}>: use_nunchaku_parsers
# OASIS_STOP

true: use_menhir
true: safe_string

<tests> or <tptp>: -traverse

# generated code...
<src/parsers/nunTPTPParser.*>: warn(-20)

# more warnings
<src/**/*.ml>: warn(+a), warn(-4), warn(-44), warn(-50)

<src/core/Utils.cm*>: inline(15)

# modern OCaml!
true: bin_annot, no_alias_deps, short_paths
